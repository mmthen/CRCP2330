// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[0..2], a=1, b=2, c=3, d=4, e=5, f=6, g=7, h=8);
    RAM8(in=in, load=1, address=address[3..5], out=16);
    RAM8(in=in, load=2, address=address[3..5], out=15);
    RAM8(in=in, load=3, address=address[3..5],  out=14);
    RAM8(in=in, load=4, address=address[3..5], out=13);
    RAM8(in=in, load=5, address=address[3..5], out=12);
    RAM8(in=in, load=6, address=address[3..5], out=11);
	RAM8(in=in, load=7, address=address[3..5], out=10);
	RAM8(in=in, load=8, address=address[3..5], out=9);
    Mux8way16(a=16,b=15,c=14,d=13,e=12,f=11,g=10,h=9, sel=address[0..2],out=out);
}
}